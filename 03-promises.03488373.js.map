{"mappings":"iiBAAAA,EAAA,S,iBAQA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAdMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAgBtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAMC,EAAaL,SAASC,cAAc,kBACpCK,EAAYN,SAASC,cAAc,iBACnCM,EAAcP,SAASC,cAAc,mBAErCO,EAAeC,OAAOJ,EAAWK,OACjCC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAElC,GAAIC,GAAQ,GAAKH,GAAgB,GAAKI,GAAU,EAE9C,YADAC,EAAAC,GAASC,OAAOC,QAAQ,2DAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,IAAK,CAGhC3B,EAAc2B,EAFOT,GAAgBS,EAAI,GAAKN,GAG3CO,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBqB,EAAAC,GAASC,OAAOK,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAEvE8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBqB,EAAAC,GAASC,OAAOC,QAAQ,sBAAqCK,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('[name=\"delay\"]');\n  const stepInput = document.querySelector('[name=\"step\"]');\n  const amountInput = document.querySelector('[name=\"amount\"]');\n\n  const initialDelay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if (step <= 0 || initialDelay <= 0 || amount <= 0) {\n    Notiflix.Notify.failure('Step, initial delay, and amount must be positive values');\n    return; // stop execution\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = initialDelay + (i - 1) * step;\n\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}"],"names":["parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","initialDelay","Number","value","step","amount","$parcel$interopDefault","$6JpON","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.03488373.js.map"}